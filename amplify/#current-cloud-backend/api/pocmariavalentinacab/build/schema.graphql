
type Book {
  id: ID!
  title: String!
  description: String!
  createdDate: String!
  fileUrl: String!
  file: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelBookConnection {
  items: [Book]!
  nextToken: String
}

input ModelBookFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  createdDate: ModelStringInput
  fileUrl: ModelStringInput
  file: ModelStringInput
  and: [ModelBookFilterInput]
  or: [ModelBookFilterInput]
  not: ModelBookFilterInput
}

type Query {
  getBook(id: ID!): Book
  listBooks(filter: ModelBookFilterInput, limit: Int, nextToken: String): ModelBookConnection
}

input ModelBookConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  createdDate: ModelStringInput
  fileUrl: ModelStringInput
  file: ModelStringInput
  and: [ModelBookConditionInput]
  or: [ModelBookConditionInput]
  not: ModelBookConditionInput
}

input CreateBookInput {
  id: ID
  title: String!
  description: String!
  createdDate: String!
  fileUrl: String!
  file: String!
}

input UpdateBookInput {
  id: ID!
  title: String
  description: String
  createdDate: String
  fileUrl: String
  file: String
}

input DeleteBookInput {
  id: ID!
}

type Mutation {
  createBook(input: CreateBookInput!, condition: ModelBookConditionInput): Book
  updateBook(input: UpdateBookInput!, condition: ModelBookConditionInput): Book
  deleteBook(input: DeleteBookInput!, condition: ModelBookConditionInput): Book
}

input ModelSubscriptionBookFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  createdDate: ModelSubscriptionStringInput
  fileUrl: ModelSubscriptionStringInput
  file: ModelSubscriptionStringInput
  and: [ModelSubscriptionBookFilterInput]
  or: [ModelSubscriptionBookFilterInput]
}

type Subscription {
  onCreateBook(filter: ModelSubscriptionBookFilterInput): Book @aws_subscribe(mutations: ["createBook"])
  onUpdateBook(filter: ModelSubscriptionBookFilterInput): Book @aws_subscribe(mutations: ["updateBook"])
  onDeleteBook(filter: ModelSubscriptionBookFilterInput): Book @aws_subscribe(mutations: ["deleteBook"])
}

